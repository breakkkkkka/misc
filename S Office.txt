如果你想将遍历得到的结果存储起来，并在所有目录遍历完成后一并输出，你可以使用一个容器（例如`std::vector`）来保存结果，然后在遍历完成后循环输出结果。以下是修改后的代码示例：

```cpp
#include <iostream>
#include <fstream>
#include <windows.h>
#include <filesystem>
#include <vector>

struct FileInfo {
    std::string filePath;
    bool is64Bit;
};

bool is64BitPE(const std::string& filePath) {
    std::ifstream file(filePath, std::ios::in | std::ios::binary);
    if (!file) {
        std::cerr << "Failed to open file: " << filePath << std::endl;
        return false;
    }

    IMAGE_DOS_HEADER dosHeader;
    file.read(reinterpret_cast<char*>(&dosHeader), sizeof(IMAGE_DOS_HEADER));
    if (dosHeader.e_magic != IMAGE_DOS_SIGNATURE) {
        std::cerr << "Invalid DOS signature." << std::endl;
        file.close();
        return false;
    }

    file.seekg(dosHeader.e_lfanew, std::ios::beg);
    DWORD peSignature;
    file.read(reinterpret_cast<char*>(&peSignature), sizeof(DWORD));
    if (peSignature != IMAGE_NT_SIGNATURE) {
        std::cerr << "Invalid PE signature." << std::endl;
        file.close();
        return false;
    }

    IMAGE_FILE_HEADER fileHeader;
    file.read(reinterpret_cast<char*>(&fileHeader), sizeof(IMAGE_FILE_HEADER));
    if (fileHeader.Machine == IMAGE_FILE_MACHINE_AMD64 || fileHeader.Machine == IMAGE_FILE_MACHINE_IA64) {
        file.close();
        return true;  // 64-bit PE
    }

    file.close();
    return false;  // 32-bit PE
}

void traverseDirectory(const std::string& directoryPath, std::vector<FileInfo>& fileInfoVec) {
    try {
        for (const auto& entry : std::filesystem::directory_iterator(directoryPath)) {
            const std::string& filePath = entry.path().string();
            if (entry.is_regular_file() && entry.path().extension() == ".exe") {
                FileInfo fileInfo;
                fileInfo.filePath = filePath;
                fileInfo.is64Bit = is64BitPE(filePath);
                fileInfoVec.push_back(fileInfo);
            } else if (entry.is_directory()) {
                traverseDirectory(filePath, fileInfoVec);
            }
        }
    } catch (const std::filesystem::filesystem_error& ex) {
        std::cerr << "Error accessing directory: " << ex.what() << std::endl;
    }
}

int main() {
    std::string directoryPath = "C:\\path\\to\\your\\directory";  // 替换为实际的目录路径
    std::vector<FileInfo> fileInfoVec;
    traverseDirectory(directoryPath, fileInfoVec);

    for (const auto& fileInfo : fileInfoVec) {
        if (fileInfo.is64Bit) {
            std::cout << fileInfo.filePath << " is a 64-bit PE." << std::endl;
        } else {
            std::cout << fileInfo.filePath << " is a 32-bit PE." << std::endl;
        }
    }

    return 0;
}
```

在上述修改后的代码中，定义了一个`FileInfo`结构体，用于保存文件路径和位数信息。在`traverseDirectory`函数中，将每个文件的路径和位数信息存储到`fileInfoVec`容器中。在遍历完成后，使用循环遍历`fileInfoVec`并输出结果。

请将`"C:\\path\\to\\your\\directory"`替换为实际的目录路径，然后运行代码。遍历过程中得到的文件路径和位数信息将被存储在`fileInfoVec`容器中，并在遍历完成后一并输出。
